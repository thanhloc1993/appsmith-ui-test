{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "initUnleash",
    "fullyQualifiedName": "Unleash_Course.initUnleash",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "course-list",
    "collectionId": "course-list_Unleash_Course",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n  const mappingEnv = {\n    \"staging\": \"stag\",\n    \"uat\": \"uat\",\n    \"master\": \"prod\"\n  };\n  let checkEnvAndOrg = function (env, orgID, strategies) {\n    let found = false;\n    for (let i = 0; i < strategies.length; i++) {\n      if (strategies[i].name == 'strategy_environment') {\n        const environments = strategies[i].parameters.environments.split(\",\");\n        for (let e = 0; e < environments.length; e++) {\n          if (environments[e] == env) {\n            found = true;\n            break;\n          }\n        }\n      }\n      if (strategies[i].name == 'strategy_organization' && orgID != undefined && found) {\n        found = false;\n        const organizations = strategies[i].parameters.organizations.split(\",\");\n        for (let o = 0; o < organizations.length; o++) {\n          if (organizations[o] == orgID) {\n            found = true;\n            break;\n          }\n        }\n      }\n    }\n    return found;\n  };\n  const env = mappingEnv[appsmith.URL.queryParams[\"branch\"]] ? mappingEnv[appsmith.URL.queryParams[\"branch\"]] : \"stag\";\n  const orgID = appsmith.URL.queryParams[\"organization\"];\n  console.log(env, orgID);\n  const results = await Unleash.run();\n  const features = results.features.map(feature => {\n    return {\n      ...feature,\n      enabled: feature.enabled && checkEnvAndOrg(env, orgID, feature.strategies)\n    };\n  });\n  console.log(features);\n  for (let i = 0; i < features.length; i++) {\n    storeValue(features[i].name, features[i].enabled);\n  }\n  return features.length;\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": true,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n  const mappingEnv = {\n    \"staging\": \"stag\",\n    \"uat\": \"uat\",\n    \"master\": \"prod\"\n  };\n  let checkEnvAndOrg = function (env, orgID, strategies) {\n    let found = false;\n    for (let i = 0; i < strategies.length; i++) {\n      if (strategies[i].name == 'strategy_environment') {\n        const environments = strategies[i].parameters.environments.split(\",\");\n        for (let e = 0; e < environments.length; e++) {\n          if (environments[e] == env) {\n            found = true;\n            break;\n          }\n        }\n      }\n      if (strategies[i].name == 'strategy_organization' && orgID != undefined && found) {\n        found = false;\n        const organizations = strategies[i].parameters.organizations.split(\",\");\n        for (let o = 0; o < organizations.length; o++) {\n          if (organizations[o] == orgID) {\n            found = true;\n            break;\n          }\n        }\n      }\n    }\n    return found;\n  };\n  const env = mappingEnv[appsmith.URL.queryParams[\"branch\"]] ? mappingEnv[appsmith.URL.queryParams[\"branch\"]] : \"stag\";\n  const orgID = appsmith.URL.queryParams[\"organization\"];\n  console.log(env, orgID);\n  const results = await Unleash.run();\n  const features = results.features.map(feature => {\n    return {\n      ...feature,\n      enabled: feature.enabled && checkEnvAndOrg(env, orgID, feature.strategies)\n    };\n  });\n  console.log(features);\n  for (let i = 0; i < features.length; i++) {\n    storeValue(features[i].name, features[i].enabled);\n  }\n  return features.length;\n}"
    ],
    "userSetOnLoad": true,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "course-list_Unleash_Course.initUnleash",
  "deleted": false,
  "gitSyncId": "637dc0bc0b93ed5dcbd281d4_637f47072741490e0fbf5bee"
}