{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "getConfig",
    "fullyQualifiedName": "JSObject1.getConfig",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Config setting",
    "collectionId": "Config setting_JSObject1",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async key => {\n  console.log(key);\n  let config = await GetConfig.run({\n    keys: [\"lesson.lessonmgmt.zoom_selection\"]\n  });\n  console.log(config);\n  if (config.data) {\n    let obj = config.data.external_configuration_value.find(x => {\n      return x.config_value == key;\n    });\n    return obj ? obj.object_value : \"\";\n  }\n  return \"\";\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [
        {}
      ],
      "isAsync": true
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async key => {\n  console.log(key);\n  let config = await GetConfig.run({\n    keys: [\"lesson.lessonmgmt.zoom_selection\"]\n  });\n  console.log(config);\n  if (config.data) {\n    let obj = config.data.external_configuration_value.find(x => {\n      return x.config_value == key;\n    });\n    return obj ? obj.object_value : \"\";\n  }\n  return \"\";\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Config setting_JSObject1.getConfig",
  "deleted": false,
  "gitSyncId": "636db6ffc4512f2ab76970fd_636df456c4512f2ab769712f"
}