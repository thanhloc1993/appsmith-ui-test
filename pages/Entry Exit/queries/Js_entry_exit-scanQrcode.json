{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "scanQrcode",
    "fullyQualifiedName": "Js_entry_exit.scanQrcode",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Entry Exit",
    "collectionId": "Entry Exit_Js_entry_exit",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n  console.log(qr_code.value);\n  const student = await Verify_user.run({\n    \"student_id\": qr_code.value\n  });\n  if (student.length == 0) {\n    showAlert(\"QR code invalid\");\n    return false;\n  }\n  const lastCheckin = await Get_last_checkin.run({\n    \"student_id\": qr_code.value\n  });\n  let type = \"entry\";\n  if (lastCheckin.length > 0) {\n    type = lastCheckin[0].exit_at ? \"entry\" : \"exit\";\n  }\n  console.log({\n    \"entryexit_id\": self.crypto.randomUUID(),\n    \"student_id\": qr_code.value,\n    \"entry_at\": type == \"entry\" ? moment().format(\"YYYY-MM-DD HH:mm:ss\") : null,\n    \"exit_at\": type == \"exit\" ? moment().format(\"YYYY-MM-DD HH:mm:ss\") : null\n  });\n  const data = await Add_entry_exit.run({\n    \"entryexit_id\": self.crypto.randomUUID(),\n    \"student_id\": qr_code.value,\n    \"entry_at\": type == \"entry\" ? moment().format(\"YYYY-MM-DD HH:mm:ss\") : null,\n    \"exit_at\": type == \"exit\" ? moment().format(\"YYYY-MM-DD HH:mm:ss\") : null\n  });\n  showAlert(`${type} successfully!`);\n  return true;\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": false,
    "clientSideExecution": true,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n  console.log(qr_code.value);\n  const student = await Verify_user.run({\n    \"student_id\": qr_code.value\n  });\n  if (student.length == 0) {\n    showAlert(\"QR code invalid\");\n    return false;\n  }\n  const lastCheckin = await Get_last_checkin.run({\n    \"student_id\": qr_code.value\n  });\n  let type = \"entry\";\n  if (lastCheckin.length > 0) {\n    type = lastCheckin[0].exit_at ? \"entry\" : \"exit\";\n  }\n  console.log({\n    \"entryexit_id\": self.crypto.randomUUID(),\n    \"student_id\": qr_code.value,\n    \"entry_at\": type == \"entry\" ? moment().format(\"YYYY-MM-DD HH:mm:ss\") : null,\n    \"exit_at\": type == \"exit\" ? moment().format(\"YYYY-MM-DD HH:mm:ss\") : null\n  });\n  const data = await Add_entry_exit.run({\n    \"entryexit_id\": self.crypto.randomUUID(),\n    \"student_id\": qr_code.value,\n    \"entry_at\": type == \"entry\" ? moment().format(\"YYYY-MM-DD HH:mm:ss\") : null,\n    \"exit_at\": type == \"exit\" ? moment().format(\"YYYY-MM-DD HH:mm:ss\") : null\n  });\n  showAlert(`${type} successfully!`);\n  return true;\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Entry Exit_Js_entry_exit.scanQrcode",
  "deleted": false,
  "gitSyncId": "63bfcc1f0a83662b10b21f8c_63bfd2330a83662b10b21f99"
}