{
  "unpublishedCollection": {
    "name": "CONFIG_JS",
    "pageId": "config-setting",
    "pluginId": "js-plugin",
    "pluginType": "JS",
    "actions": [],
    "archivedActions": [],
    "body": "export default {\n\t\n\tgetConfig: async () => {\n\t\t//use async-await or promises\n\t\tlet config = await GetConfig.run(\n\t\t\t{\n\t\t\t\tkeys: [\"general.logo\",\"general.app_theme\",\"user.authentication.allowed_address_list\",\"user.authentication.ip_address_restriction\"]\n\t\t\t}\n\t\t)\n\t\tif (config.data) {\n\t\t\tconst result = config.data.external_configuration_value.reduce(function(map, obj) {\n\t\t\t\tmap[obj.config_key] = obj.config_value.replaceAll(\"'\",\"\");\n\t\t\t\treturn map;\n\t\t\t}, {});\n\t\t\treturn result;\n\t\t}\n\t\treturn [];\n\t},\n\tgetIPFromConfig: async () => {\n\t\tlet data = CONFIG_JS.getConfig.data[\"user.authentication.allowed_address_list\"] ? JSON.parse(CONFIG_JS.getConfig.data[\"user.authentication.allowed_address_list\"]).map((row, i) => {\n\t\t\treturn {\n\t\t\t\tlocation: row.location,\n\t\t\t\tip: row.ip\n\t\t\t}\n\t\t}) : [];\n\t\tstoreValue(\"draft_allowed_address_list\", data, false)\n\t\treturn appsmith.store.allowed_address_list ?  appsmith.store.allowed_address_list : data;\n\t},\n\tdeleteListIP: () => {\n\t\t  let ips = appsmith.store.draft_allowed_address_list;\n\t\t\tlet removed = table_edit_ip.selectedRows;\n\t\t\tips = ips.filter(x => {\n\t\t\t\tlet check = removed ? removed.findIndex(a => {\n\t\t\t\t\treturn a.location == x.location\n\t\t\t\t}) : -1;\n\t\t\t\treturn check == -1;\n\t\t\t} );\n\t\t\tstoreValue(\"draft_allowed_address_list\", ips, false)\n\t},\n\taddIP: () => {\n\t\tif (!input_location.isValid || !input_ip.isValid) {\n\t\t\tshowAlert(\"Not a valid value\");\n\t\t\treturn;\n\t\t}\n\t\tlet addedIPs = appsmith.store.draft_allowed_address_list ? appsmith.store.draft_allowed_address_list : [];\n\t\taddedIPs.push({\n\t\t\tlocation: input_location.text,\n\t\t\tip: input_ip.text\n\t\t})\n\t\tstoreValue('draft_allowed_address_list', addedIPs, false);\n\t\tcloseModal(\"Modal_add_ip\");\n\t\tshowModal(\"Modal_security\");\n\t},\n\tsaveIP: () => {\n\t\tconst allowConnect = table_edit_ip.tableData.length == 0 ? 'N' : allow_connect.selectedOptionValue;\n\t\tUpdateConfig.run(\n\t\t\t{\n\t\t\t\t\"configKey\": \"user.authentication.ip_address_restriction\",\n\t\t\t\t\"configValue\": allowConnect == 'Y' ? 'on' : 'off'\n\t\t\t}\n\t\t);\n\t\tstoreValue(\"ip_address_restriction\", allowConnect == 'Y' ? 'Yes' : 'No', false);\n\t\tlet ips = table_edit_ip.tableData.map(row => {\n\t\t\treturn {\n\t\t\t\tlocation: row.location,\n\t\t\t\tip: row.ip\n\t\t\t}\n\t\t});\n\t\tlet data = JSON.stringify(ips);\n\t\tstoreValue(\"allowed_address_list\", data, false);\n\t\tUpdateConfig.run(\n\t\t\t{\n\t\t\t\t\"configKey\": \"user.authentication.allowed_address_list\",\n\t\t\t\t\"configValue\": \"'\" + data +\"'\"\n\t\t\t}\n\t\t);\n\t\tcloseModal(\"Modal_security\");\n\t},\n\tsaveGeneral: () => {\n\t\tstoreValue(\"logo\", input_logo.text, false);\n\t\tstoreValue(\"app_theme\", input_theme.text, false);\n\t\tUpdateConfig.run(\n\t\t\t{\n\t\t\t\t\"configKey\": \"general.logo\",\n\t\t\t\t\"configValue\": input_logo.text\n\t\t\t}\n\t\t);\n\t\tUpdateConfig.run(\n\t\t\t{\n\t\t\t\t\"configKey\": \"general.app_theme\",\n\t\t\t\t\"configValue\": input_theme.text\n\t\t\t}\n\t\t);\n\t\tcloseModal(\"Model_general\");\n\t}\n}",
    "variables": [],
    "userPermissions": []
  },
  "id": "config-setting_CONFIG_JS",
  "deleted": false,
  "gitSyncId": "63622c59b3ce396b06d52fb8_636c6904b6630319f85fec07"
}